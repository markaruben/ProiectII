import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
class NgToastService {
    constructor() {
        this.toastDetails$ = new Subject();
    }
    getToastDetails() {
        return this.toastDetails$.asObservable();
    }
    success(message) {
        this.toastDetails$.next({ type: 'success', detail: message.detail, position: message.position, summary: message.summary, duration: message.duration, sticky: message.sticky });
    }
    error(message) {
        this.toastDetails$.next({ type: 'error', detail: message.detail, position: message.position, summary: message.summary, duration: message.duration, sticky: message.sticky });
    }
    info(message) {
        this.toastDetails$.next({ type: 'info', detail: message.detail, position: message.position, summary: message.summary, duration: message.duration, sticky: message.sticky });
    }
    warning(message) {
        this.toastDetails$.next({ type: 'warning', detail: message.detail, summary: message.summary, position: message.position, duration: message.duration, sticky: message.sticky });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: NgToastService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: NgToastService, providedIn: 'root' }); }
}
export { NgToastService };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: NgToastService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return []; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctdG9hc3Quc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL25nLXRvYXN0L3NyYy9saWIvbmctdG9hc3Quc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7O0FBRy9CLE1BR2EsY0FBYztJQUl6QjtRQUZRLGtCQUFhLEdBQUcsSUFBSSxPQUFPLEVBQVUsQ0FBQztJQUU5QixDQUFDO0lBRWhCLGVBQWU7UUFDZCxPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDM0MsQ0FBQztJQUVELE9BQU8sQ0FBQyxPQUFjO1FBQ3BCLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFTLEVBQUMsSUFBSSxFQUFDLFNBQVMsRUFBQyxNQUFNLEVBQUMsT0FBTyxDQUFDLE1BQU0sRUFBQyxRQUFRLEVBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxPQUFPLEVBQUMsT0FBTyxDQUFDLE9BQU8sRUFBQyxRQUFRLEVBQUMsT0FBTyxDQUFDLFFBQVEsRUFBQyxNQUFNLEVBQUMsT0FBTyxDQUFDLE1BQU0sRUFBQyxDQUFDLENBQUE7SUFDNUssQ0FBQztJQUNELEtBQUssQ0FBQyxPQUFjO1FBQ2xCLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFTLEVBQUMsSUFBSSxFQUFDLE9BQU8sRUFBQyxNQUFNLEVBQUMsT0FBTyxDQUFDLE1BQU0sRUFBQyxRQUFRLEVBQUMsT0FBTyxDQUFDLFFBQVEsRUFBQyxPQUFPLEVBQUMsT0FBTyxDQUFDLE9BQU8sRUFBQyxRQUFRLEVBQUMsT0FBTyxDQUFDLFFBQVEsRUFBQyxNQUFNLEVBQUMsT0FBTyxDQUFDLE1BQU0sRUFBQyxDQUFDLENBQUE7SUFDekssQ0FBQztJQUNELElBQUksQ0FBQyxPQUFjO1FBQ2pCLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFTLEVBQUMsSUFBSSxFQUFDLE1BQU0sRUFBQyxNQUFNLEVBQUMsT0FBTyxDQUFDLE1BQU0sRUFBQyxRQUFRLEVBQUMsT0FBTyxDQUFDLFFBQVEsRUFBQyxPQUFPLEVBQUMsT0FBTyxDQUFDLE9BQU8sRUFBQyxRQUFRLEVBQUMsT0FBTyxDQUFDLFFBQVEsRUFBQyxNQUFNLEVBQUMsT0FBTyxDQUFDLE1BQU0sRUFBQyxDQUFDLENBQUE7SUFDeEssQ0FBQztJQUNELE9BQU8sQ0FBQyxPQUFjO1FBQ3BCLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFTLEVBQUMsSUFBSSxFQUFDLFNBQVMsRUFBQyxNQUFNLEVBQUMsT0FBTyxDQUFDLE1BQU0sRUFBQyxPQUFPLEVBQUMsT0FBTyxDQUFDLE9BQU8sRUFBQyxRQUFRLEVBQUMsT0FBTyxDQUFDLFFBQVEsRUFBQyxRQUFRLEVBQUMsT0FBTyxDQUFDLFFBQVEsRUFBQyxNQUFNLEVBQUMsT0FBTyxDQUFDLE1BQU0sRUFBQyxDQUFDLENBQUE7SUFDM0ssQ0FBQzs4R0FyQlUsY0FBYztrSEFBZCxjQUFjLGNBRmIsTUFBTTs7U0FFUCxjQUFjOzJGQUFkLGNBQWM7a0JBSDFCLFVBQVU7bUJBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgSVRvYXN0IH0gZnJvbSAnLi90b2FzdC5tb2RlbCc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIE5nVG9hc3RTZXJ2aWNlIHtcblxuICBwcml2YXRlIHRvYXN0RGV0YWlscyQgPSBuZXcgU3ViamVjdDxJVG9hc3Q+KCk7XG5cbiAgY29uc3RydWN0b3IoKSB7IH1cblxuICAgZ2V0VG9hc3REZXRhaWxzKCl7XG4gICAgcmV0dXJuIHRoaXMudG9hc3REZXRhaWxzJC5hc09ic2VydmFibGUoKTtcbiAgfVxuXG4gIHN1Y2Nlc3MobWVzc2FnZTpJVG9hc3Qpe1xuICAgIHRoaXMudG9hc3REZXRhaWxzJC5uZXh0KDxJVG9hc3Q+e3R5cGU6J3N1Y2Nlc3MnLGRldGFpbDptZXNzYWdlLmRldGFpbCxwb3NpdGlvbjptZXNzYWdlLnBvc2l0aW9uLCBzdW1tYXJ5Om1lc3NhZ2Uuc3VtbWFyeSxkdXJhdGlvbjptZXNzYWdlLmR1cmF0aW9uLHN0aWNreTptZXNzYWdlLnN0aWNreX0pXG4gIH1cbiAgZXJyb3IobWVzc2FnZTpJVG9hc3Qpe1xuICAgIHRoaXMudG9hc3REZXRhaWxzJC5uZXh0KDxJVG9hc3Q+e3R5cGU6J2Vycm9yJyxkZXRhaWw6bWVzc2FnZS5kZXRhaWwscG9zaXRpb246bWVzc2FnZS5wb3NpdGlvbixzdW1tYXJ5Om1lc3NhZ2Uuc3VtbWFyeSxkdXJhdGlvbjptZXNzYWdlLmR1cmF0aW9uLHN0aWNreTptZXNzYWdlLnN0aWNreX0pXG4gIH1cbiAgaW5mbyhtZXNzYWdlOklUb2FzdCl7XG4gICAgdGhpcy50b2FzdERldGFpbHMkLm5leHQoPElUb2FzdD57dHlwZTonaW5mbycsZGV0YWlsOm1lc3NhZ2UuZGV0YWlsLHBvc2l0aW9uOm1lc3NhZ2UucG9zaXRpb24sc3VtbWFyeTptZXNzYWdlLnN1bW1hcnksZHVyYXRpb246bWVzc2FnZS5kdXJhdGlvbixzdGlja3k6bWVzc2FnZS5zdGlja3l9KVxuICB9XG4gIHdhcm5pbmcobWVzc2FnZTpJVG9hc3Qpe1xuICAgIHRoaXMudG9hc3REZXRhaWxzJC5uZXh0KDxJVG9hc3Q+e3R5cGU6J3dhcm5pbmcnLGRldGFpbDptZXNzYWdlLmRldGFpbCxzdW1tYXJ5Om1lc3NhZ2Uuc3VtbWFyeSxwb3NpdGlvbjptZXNzYWdlLnBvc2l0aW9uLGR1cmF0aW9uOm1lc3NhZ2UuZHVyYXRpb24sc3RpY2t5Om1lc3NhZ2Uuc3RpY2t5fSlcbiAgfVxufVxuIl19